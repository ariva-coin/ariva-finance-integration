export async function SHA1(msg) {
    function rotate_left(n, s) {
        var t4 = (n << s) | (n >>> (32 - s));
        return t4;
    }

    function lsb_hex(val) {
        var str = '';
        var i;
        var vh;
        var vl;
        for (i = 0; i <= 6; i += 2) {
            vh = (val >>> (i * 4 + 4)) & 0x0f;
            vl = (val >>> (i * 4)) & 0x0f;
            str += vh.toString(16) + vl.toString(16);
        }
        return str;
    };

    function cvt_hex(val) {
        var str = '';
        var i;
        var v;
        for (i = 7; i >= 0; i--) {
            v = (val >>> (i * 4)) & 0x0f;
            str += v.toString(16);
        }
        return str;
    };

    function Utf8Encode(string) {
        string = string.replace(/\r\n/g, '\n');
        var utftext = '';
        for (var n = 0; n < string.length; n++) {
            var c = string.charCodeAt(n);
            if (c < 128) {
                utftext += String.fromCharCode(c);
            } else if ((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            } else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }
        }
        return utftext;
    };
    var blockstart;
    var i, j;
    var W = new Array(80);
    var H0 = 0x67452301;
    var H1 = 0xEFCDAB89;
    var H2 = 0x98BADCFE;
    var H3 = 0x10325476;
    var H4 = 0xC3D2E1F0;
    var A, B, C, D, E;
    var temp;
    msg = Utf8Encode(msg);
    var msg_len = msg.length;
    var word_array = new Array();
    for (i = 0; i < msg_len - 3; i += 4) {
        j = msg.charCodeAt(i) << 24 | msg.charCodeAt(i + 1) << 16 |
            msg.charCodeAt(i + 2) << 8 | msg.charCodeAt(i + 3);
        word_array.push(j);
    }
    switch (msg_len % 4) {
    case 0:
        i = 0x080000000;
        break;
    case 1:
        i = msg.charCodeAt(msg_len - 1) << 24 | 0x0800000;
        break;
    case 2:
        i = msg.charCodeAt(msg_len - 2) << 24 | msg.charCodeAt(msg_len - 1) << 16 | 0x08000;
        break;
    case 3:
        i = msg.charCodeAt(msg_len - 3) << 24 | msg.charCodeAt(msg_len - 2) << 16 | msg.charCodeAt(msg_len - 1) << 8 | 0x80;
        break;
    }
    word_array.push(i);
    while ((word_array.length % 16) != 14) word_array.push(0);
    word_array.push(msg_len >>> 29);
    word_array.push((msg_len << 3) & 0x0ffffffff);
    for (blockstart = 0; blockstart < word_array.length; blockstart += 16) {
        for (i = 0; i < 16; i++) W[i] = word_array[blockstart + i];
        for (i = 16; i <= 79; i++) W[i] = rotate_left(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
        A = H0;
        B = H1;
        C = H2;
        D = H3;
        E = H4;
        for (i = 0; i <= 19; i++) {
            temp = (rotate_left(A, 5) + ((B & C) | (~B & D)) + E + W[i] + 0x5A827999) & 0x0ffffffff;
            E = D;
            D = C;
            C = rotate_left(B, 30);
            B = A;
            A = temp;
        }
        for (i = 20; i <= 39; i++) {
            temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + 0x6ED9EBA1) & 0x0ffffffff;
            E = D;
            D = C;
            C = rotate_left(B, 30);
            B = A;
            A = temp;
        }
        for (i = 40; i <= 59; i++) {
            temp = (rotate_left(A, 5) + ((B & C) | (B & D) | (C & D)) + E + W[i] + 0x8F1BBCDC) & 0x0ffffffff;
            E = D;
            D = C;
            C = rotate_left(B, 30);
            B = A;
            A = temp;
        }
        for (i = 60; i <= 79; i++) {
            temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + 0xCA62C1D6) & 0x0ffffffff;
            E = D;
            D = C;
            C = rotate_left(B, 30);
            B = A;
            A = temp;
        }
        H0 = (H0 + A) & 0x0ffffffff;
        H1 = (H1 + B) & 0x0ffffffff;
        H2 = (H2 + C) & 0x0ffffffff;
        H3 = (H3 + D) & 0x0ffffffff;
        H4 = (H4 + E) & 0x0ffffffff;
    }
    var temp = cvt_hex(H0) + cvt_hex(H1) + cvt_hex(H2) + cvt_hex(H3) + cvt_hex(H4);

    return temp.toLowerCase();
}

function pack(format) {
    let formatPointer = 0
    let argumentPointer = 1
    let result = ''
    let argument = ''
    let i = 0
    let r = []
    let instruction, quantifier, word, precisionBits, exponentBits, extraNullCount
    // vars used by float encoding
    let bias
    let minExp
    let maxExp
    let minUnnormExp
    let status
    let exp
    let len
    let bin
    let signal
    let n
    let intPart
    let floatPart
    let lastBit
    let rounded
    let j
    let k
    let tmpResult
    while (formatPointer < format.length) {
        instruction = format.charAt(formatPointer)
        quantifier = ''
        formatPointer++
        while ((formatPointer < format.length) && (format.charAt(formatPointer)
                .match(/[\d*]/) !== null)) {
            quantifier += format.charAt(formatPointer)
            formatPointer++
        }
        if (quantifier === '') {
            quantifier = '1'
        }
        // Now pack variables: 'quantifier' times 'instruction'
        switch (instruction) {
        case 'a':
        case 'A':
            // NUL-padded string
            // SPACE-padded string
            if (typeof arguments[argumentPointer] === 'undefined') {
                throw new Error('Warning:  pack() Type ' + instruction + ': not enough arguments')
            } else {
                argument = String(arguments[argumentPointer])
            }
            if (quantifier === '*') {
                quantifier = argument.length
            }
            for (i = 0; i < quantifier; i++) {
                if (typeof argument[i] === 'undefined') {
                    if (instruction === 'a') {
                        result += String.fromCharCode(0)
                    } else {
                        result += ' '
                    }
                } else {
                    result += argument[i]
                }
            }
            argumentPointer++
            break
        case 'h':
        case 'H':
            // Hex string, low nibble first
            // Hex string, high nibble first
            if (typeof arguments[argumentPointer] === 'undefined') {
                throw new Error('Warning: pack() Type ' + instruction + ': not enough arguments')
            } else {
                argument = arguments[argumentPointer]
            }
            if (quantifier === '*') {
                quantifier = argument.length
            }
            if (quantifier > argument.length) {
                const msg = 'Warning: pack() Type ' + instruction + ': not enough characters in string'
                throw new Error(msg)
            }
            for (i = 0; i < quantifier; i += 2) {
                // Always get per 2 bytes...
                word = argument[i]
                if (((i + 1) >= quantifier) || typeof argument[i + 1] === 'undefined') {
                    word += '0'
                } else {
                    word += argument[i + 1]
                }
                // The fastest way to reverse?
                if (instruction === 'h') {
                    word = word[1] + word[0]
                }
                result += String.fromCharCode(parseInt(word, 16))
            }
            argumentPointer++
            break
        case 'c':
        case 'C':
            // signed char
            // unsigned char
            // c and C is the same in pack
            if (quantifier === '*') {
                quantifier = arguments.length - argumentPointer
            }
            if (quantifier > (arguments.length - argumentPointer)) {
                throw new Error('Warning:  pack() Type ' + instruction + ': too few arguments')
            }
            for (i = 0; i < quantifier; i++) {
                result += String.fromCharCode(arguments[argumentPointer])
                argumentPointer++
            }
            break
        case 's':
        case 'S':
        case 'v':
            // signed short (always 16 bit, machine byte order)
            // unsigned short (always 16 bit, machine byte order)
            // s and S is the same in pack
            if (quantifier === '*') {
                quantifier = arguments.length - argumentPointer
            }
            if (quantifier > (arguments.length - argumentPointer)) {
                throw new Error('Warning:  pack() Type ' + instruction + ': too few arguments')
            }
            for (i = 0; i < quantifier; i++) {
                result += String.fromCharCode(arguments[argumentPointer] & 0xFF)
                result += String.fromCharCode(arguments[argumentPointer] >> 8 & 0xFF)
                argumentPointer++
            }
            break
        case 'n':
            // unsigned short (always 16 bit, big endian byte order)
            if (quantifier === '*') {
                quantifier = arguments.length - argumentPointer
            }
            if (quantifier > (arguments.length - argumentPointer)) {
                throw new Error('Warning: pack() Type ' + instruction + ': too few arguments')
            }
            for (i = 0; i < quantifier; i++) {
                result += String.fromCharCode(arguments[argumentPointer] >> 8 & 0xFF)
                result += String.fromCharCode(arguments[argumentPointer] & 0xFF)
                argumentPointer++
            }
            break
        case 'i':
        case 'I':
        case 'l':
        case 'L':
        case 'V':
            if (quantifier === '*') {
                quantifier = arguments.length - argumentPointer
            }
            if (quantifier > (arguments.length - argumentPointer)) {
                throw new Error('Warning:  pack() Type ' + instruction + ': too few arguments')
            }
            for (i = 0; i < quantifier; i++) {
                result += String.fromCharCode(arguments[argumentPointer] & 0xFF)
                result += String.fromCharCode(arguments[argumentPointer] >> 8 & 0xFF)
                result += String.fromCharCode(arguments[argumentPointer] >> 16 & 0xFF)
                result += String.fromCharCode(arguments[argumentPointer] >> 24 & 0xFF)
                argumentPointer++
            }
            break
        case 'N':
            // unsigned long (always 32 bit, big endian byte order)
            if (quantifier === '*') {
                quantifier = arguments.length - argumentPointer
            }
            if (quantifier > (arguments.length - argumentPointer)) {
                throw new Error('Warning:  pack() Type ' + instruction + ': too few arguments')
            }
            for (i = 0; i < quantifier; i++) {
                result += String.fromCharCode(arguments[argumentPointer] >> 24 & 0xFF)
                result += String.fromCharCode(arguments[argumentPointer] >> 16 & 0xFF)
                result += String.fromCharCode(arguments[argumentPointer] >> 8 & 0xFF)
                result += String.fromCharCode(arguments[argumentPointer] & 0xFF)
                argumentPointer++
            }
            break
        case 'f':
        case 'd':
            // float (machine dependent size and representation)
            // double (machine dependent size and representation)
            // version based on IEEE754
            precisionBits = 23
            exponentBits = 8
            if (instruction === 'd') {
                precisionBits = 52
                exponentBits = 11
            }
            if (quantifier === '*') {
                quantifier = arguments.length - argumentPointer
            }
            if (quantifier > (arguments.length - argumentPointer)) {
                throw new Error('Warning:  pack() Type ' + instruction + ': too few arguments')
            }
            for (i = 0; i < quantifier; i++) {
                argument = arguments[argumentPointer]
                bias = Math.pow(2, exponentBits - 1) - 1
                minExp = -bias + 1
                maxExp = bias
                minUnnormExp = minExp - precisionBits
                status = isNaN(n = parseFloat(argument)) || n === -Infinity || n === +Infinity ? n : 0
                exp = 0
                len = 2 * bias + 1 + precisionBits + 3
                bin = new Array(len)
                signal = (n = status !== 0 ? 0 : n) < 0
                n = Math.abs(n)
                intPart = Math.floor(n)
                floatPart = n - intPart
                for (k = len; k;) {
                    bin[--k] = 0
                }
                for (k = bias + 2; intPart && k;) {
                    bin[--k] = intPart % 2
                    intPart = Math.floor(intPart / 2)
                }
                for (k = bias + 1; floatPart > 0 && k; --floatPart) {
                    (bin[++k] = ((floatPart *= 2) >= 1) - 0)
                }
                for (k = -1; ++k < len && !bin[k];) {}
                // @todo: Make this more readable:
                const key = (lastBit = precisionBits - 1 +
                    (k =
                        (exp = bias + 1 - k) >= minExp &&
                        exp <= maxExp ? k + 1 : bias + 1 - (exp = minExp - 1))) + 1
                if (bin[key]) {
                    if (!(rounded = bin[lastBit])) {
                        for (j = lastBit + 2; !rounded && j < len; rounded = bin[j++]) {}
                    }
                    for (j = lastBit + 1; rounded && --j >= 0;
                        (bin[j] = !bin[j] - 0) && (rounded = 0)) {}
                }
                for (k = k - 2 < 0 ? -1 : k - 3; ++k < len && !bin[k];) {}
                if ((exp = bias + 1 - k) >= minExp && exp <= maxExp) {
                    ++k
                } else {
                    if (exp < minExp) {
                        if (exp !== bias + 1 - len && exp < minUnnormExp) {
                            // "encodeFloat::float underflow"
                        }
                        k = bias + 1 - (exp = minExp - 1)
                    }
                }
                if (intPart || status !== 0) {
                    exp = maxExp + 1
                    k = bias + 2
                    if (status === -Infinity) {
                        signal = 1
                    } else if (isNaN(status)) {
                        bin[k] = 1
                    }
                }
                n = Math.abs(exp + bias)
                tmpResult = ''
                for (j = exponentBits + 1; --j;) {
                    tmpResult = (n % 2) + tmpResult
                    n = n >>= 1
                }
                n = 0
                j = 0
                k = (tmpResult = (signal ? '1' : '0') + tmpResult + (bin
                    .slice(k, k + precisionBits)
                    .join(''))).length
                r = []
                for (; k;) {
                    n += (1 << j) * tmpResult.charAt(--k)
                    if (j === 7) {
                        r[r.length] = String.fromCharCode(n)
                        n = 0
                    }
                    j = (j + 1) % 8
                }
                r[r.length] = n ? String.fromCharCode(n) : ''
                result += r.join('')
                argumentPointer++
            }
            break
        case 'x':
            // NUL byte
            if (quantifier === '*') {
                throw new Error('Warning: pack(): Type x: \'*\' ignored')
            }
            for (i = 0; i < quantifier; i++) {
                result += String.fromCharCode(0)
            }
            break
        case 'X':
            // Back up one byte
            if (quantifier === '*') {
                throw new Error('Warning: pack(): Type X: \'*\' ignored')
            }
            for (i = 0; i < quantifier; i++) {
                if (result.length === 0) {
                    throw new Error('Warning: pack(): Type X:' + ' outside of string')
                } else {
                    result = result.substring(0, result.length - 1)
                }
            }
            break
        case '@':
            // NUL-fill to absolute position
            if (quantifier === '*') {
                throw new Error('Warning: pack(): Type X: \'*\' ignored')
            }
            if (quantifier > result.length) {
                extraNullCount = quantifier - result.length
                for (i = 0; i < extraNullCount; i++) {
                    result += String.fromCharCode(0)
                }
            }
            if (quantifier < result.length) {
                result = result.substring(0, quantifier)
            }
            break
        default:
            throw new Error('Warning: pack() Type ' + instruction + ': unknown format code')
        }
    }
    if (argumentPointer < arguments.length) {
        const msg2 = 'Warning: pack(): ' + (arguments.length - argumentPointer) + ' arguments unused'
        throw new Error(msg2)
    }
    return result
}